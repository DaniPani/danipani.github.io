define(["../@polymer/lit-element/lit-element.js","../@fortawesome/fontawesome-svg-core/index.es.js"],function(_litElement,_indexEs){"use strict";class FontAwesomeIcon extends _litElement.LitElement{constructor(){super();this.border=!1;this.className="";this.mask=null;this.fixedWidth=!1;this.inverse=!1;this.flip=null;this.icon=null;this.listItem=!1;this.pull=null;this.pulse=!1;this.rotation=null;this.size=null;this.spin=!1;this.symbol=!1;this.title="";this.transform=null}static get properties(){return{border:{type:Boolean},className:{type:String},mask:{type:String},fixedWidth:{type:Boolean},inverse:{type:String},flip:{type:String},icon:{type:String},listItem:{type:Boolean},pull:{type:String},pulse:{type:Boolean},rotation:{type:Number},size:{type:String},spin:{type:Boolean},symbol:{},title:{type:String},transform:{}}}get classList(){const{spin,pulse,fixedWidth,inverse,border,listItem,flip,size,rotation,pull}=this,classes={"fa-spin":spin,"fa-pulse":pulse,"fa-fw":fixedWidth,"fa-inverse":inverse,"fa-border":border,"fa-li":listItem,"fa-flip-horizontal":"horizontal"===flip||"both"===flip,"fa-flip-vertical":"vertical"===flip||"both"===flip,[`fa-${size}`]:null!==size,[`fa-rotate-${rotation}`]:null!==rotation,[`fa-pull-${pull}`]:null!==pull};return Object.keys(classes).map(key=>classes[key]?key:null).filter(key=>key)}normalizeArgs(value){if(null==value){return null}if("object"===typeof value&&value.prefix&&value.iconName){return value}if(Array.isArray(value)&&2===value.length){const[prefix,iconName]=value;return{prefix,iconName}}if("string"===typeof value){return{prefix:"fas",iconName:value}}return null}FontAwesomeIcon(){const{icon:iconLookup,mask,symbol,className,title,classList,transform,normalizeArgs}=this,renderedIcon=(0,_indexEs.icon)(normalizeArgs(iconLookup),{classes:[...classList,...className.split(" ")],transform:"string"===typeof transform?_indexEs.parse.transform(transform):transform,mask:normalizeArgs(mask),symbol,title});if(!renderedIcon){console.error("Could not find icon",normalizeArgs(iconLookup));return null}return(0,_litElement.html)(renderedIcon.html)}render(){return _litElement.html`
      <style>
        :host {
          display: inline-block;
        }

        svg {
          color: var(--icon-color, black);
          background-color: var(--icon-background-color, white);
        }

        ${_indexEs.dom.css()}
      </style>
      ${this.FontAwesomeIcon()}`}}customElements.define("fontawesome-icon",FontAwesomeIcon)});